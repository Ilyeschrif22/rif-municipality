package com.example.request.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestAllPropertiesEquals(Request expected, Request actual) {
        assertRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestAllUpdatablePropertiesEquals(Request expected, Request actual) {
        assertRequestUpdatableFieldsEquals(expected, actual);
        assertRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestAutoGeneratedPropertiesEquals(Request expected, Request actual) {
        assertThat(actual)
            .as("Verify Request auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestUpdatableFieldsEquals(Request expected, Request actual) {
        assertThat(actual)
            .as("Verify Request relevant properties")
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getResolvedDate()).as("check resolvedDate").isEqualTo(expected.getResolvedDate()))
            .satisfies(a -> assertThat(a.getCitizenId()).as("check citizenId").isEqualTo(expected.getCitizenId()))
            .satisfies(a -> assertThat(a.getMunicipalityId()).as("check municipalityId").isEqualTo(expected.getMunicipalityId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestUpdatableRelationshipsEquals(Request expected, Request actual) {
        // empty method
    }
}
